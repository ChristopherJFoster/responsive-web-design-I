/* http://meyerweb.com/eric/tools/css/reset/ 
   v2.0 | 20110126
   License: none (public domain)
*/

html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
/* HTML5 display-role reset for older browsers */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: "";
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* Set every element's box-sizing to border-box */
* {
  box-sizing: border-box;
}

html,
body {
  height: 100%;
  font-family: "Titillium Web", sans-serif;
}

h1,
h2,
h3,
h4,
h5 {
  font-family: "Bangers", cursive;
  letter-spacing: 1px;
  margin-bottom: 15px;
}

/* Copy and paste your work from yesterday here and start to refactor into flexbox */

body {
  margin: 0 auto;
  width: 877px;
}

/* Maybe I should set the width on .container, and not body? */
@media (max-width: 800px) {
  body {
    width: 750px;
  }
}

@media (max-width: 500px) {
  body {
    width: 450px;
  }
}

header {
  display: flex;
  justify-content: space-between;
  margin: 20px 0;
}

/* flex-direction: column is how I got the logo above the nav elements while still using flexbox. This idea came from web17_help. I wanted to use order: -1 on the logo, which is more elegant I think, but I couldn't get it to work. I think I was not applying the right flexbox properties to the right elements. */
@media (max-width: 800px) {
  header {
    flex-direction: column;
    align-content: space-between;
  }
}

@media (max-width: 500px) {
  header {
    margin: 0;
  }
}

nav {
  display: flex;
  flex-grow: 0.95;
  align-items: center;
}

nav a {
  display: flex;
  text-decoration: none;
  color: lightslategray;
  flex-grow: 1;
}

/* Here I thought it was fine to cover two selectors in one @media since they are neighbors. */
@media (max-width: 800px) {
  nav {
    justify-content: space-between;
  }
  nav a {
    margin-top: 30px;
    padding: 0 20px;
    flex-grow: 0;
  }
}

@media (max-width: 500px) {
  nav {
    flex-wrap: wrap;
    border-top: 1px solid black;
  }
  nav a {
    margin: 0;
    padding: 20px 0;
    justify-content: center;
    width: 100%;
    font-size: 20px;
    border-bottom: 1px solid black;
  }
}

.logo {
  justify-content: flex-end;
}

@media (max-width: 800px) {
  .logo {
    padding: 15px;
  }
}

/* PM Adam helped me by pointing out that the logo is wrapped in an <a> tag, and therefore the <a> is the logo's parent. I added a class to the <a> tag so I could center the logo. */
@media (max-width: 800px) {
  .logo-anchor {
    display: flex;
    justify-content: center;
    order: -1;
  }
}

.cta {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 72px 0;
}

.cta-text {
  text-align: center;
  flex-grow: 3;
  margin-left: 47px;
}

.cta h1 {
  font-size: 73px;
}

.cta button {
  background: white;
  border: 1px solid black;
  padding: 7px 45px;
  font-size: 16px;
  margin-top: 10px;
}

@media (max-width: 800px) {
  .cta img {
    display: none;
  }
}

/* I used width:100% quite a bit today - I hadn't used it much before today. It's useful for getting images to smoothly resize as the page gets smaller. */
@media (max-width: 800px) {
  .services-header-img {
    width: 100%;
  }
}

.about-splash-div {
  display: flex;
}

.services-splash {
  margin-top: 30px;
  padding-bottom: 30px;
  border-bottom: 1px solid black;
}

.services h2 {
  font-size: 25px;
}

.about-splash {
  margin-top: 30px;
  padding-bottom: 30px;
  border-bottom: 1px solid black;
}

.main-content {
  border-top: 1px solid black;
  border-bottom: 1px solid black;
}

@media (max-width: 800px) {
  .middle-img {
    width: 100%;
  }
}

@media (max-width: 500px) {
  .top-content {
    flex-wrap: wrap;
    width: 100%;
  }
  .bottom-content {
    flex-wrap: wrap;
    width: 100%;
  }
  .text-content {
    padding: 20px 0;
  }
}

.main-content-services {
  margin: 20px 0;
  padding-bottom: 20px;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  border-bottom: 1px solid black;
}

.service-item {
  border: 2px solid gray;
  background: rgb(240, 240, 240);
  padding: 15px;
  margin: 10px 0;
  width: 49%;
}

/* Width: 100% is also useful to get items that are multiple-per-row to sit on their own rows for mobile. Very handy. */
@media (max-width: 500px) {
  .service-item {
    width: 100%;
  }
}

.service-item button {
  background: white;
  border: 1px solid black;
  padding: 10px 30px;
  margin-top: 15px;
  border-radius: 5px;
  font-size: 11px;
}

@media (max-width: 500px) {
  .services-button-div {
    display: flex;
    justify-content: center;
  }
}

.main-content-about {
  margin: 20px 0;
  padding-bottom: 20px;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  border-bottom: 1px solid black;
}

.about-item {
  border: 2px solid gray;
  background: rgb(240, 240, 240);
  padding: 15px;
  margin: 10px 0;
  width: 32%;
}

.about-item:hover {
  background: rgb(150, 150, 150);
  visibility: visible;
}

.about-item:hover .hidden-trivia {
  visibility: visible;
}

.about-item p {
  padding: 5px 0;
}

.hidden-trivia {
  text-align: center;
  font-size: 35px;
  color: yellow;
  visibility: hidden;
}

.facts {
  display: flex;
  margin: 35px 0 70px 0;
}

/* In this case, the quickest way I could get these items to behave at the mobile size was to take flexbox away from the "facts" div. I was able to keep the image centers by wrapping it in its own div and applying flexbox to that div instead. */
@media (max-width: 500px) {
  .facts {
    display: block;
  }
  .services-info-img-div {
    display: flex;
    justify-content: center;
    margin: 30px 0 0 0;
  }
}

.facts-words {
  padding-right: 20px;
}

.facts li {
  list-style-type: square;
  margin-left: 20px;
  padding: 8px 0;
}

.top-content {
  display: flex;
  margin: 35px 0;
}

.bottom-content {
  display: flex;
  margin: 35px 0;
}

.text-content {
  margin: 0 5px;
}

.contact {
  margin: 30px 0 50px 0;
}

footer {
  display: flex;
  justify-content: center;
  margin-bottom: 100px;
}
